#+TITLE: Doom Emacs Configuration
#+AUTHOR: jsravn
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link

* Intro
This is my foray into the world of literate Emacs configuration. I think I may have finally lost it. But let's give it a
shot!

I use [[https://github.com/hlissner/doom-emacs][doom-emacs]] as my core Emacs distribution.

* Core configuration
** File variables
This configures the file variables for =config.el=. Apparently [[https://nullprogram.com/blog/2016/12/22/][enabling lexical binding]] makes it faster to process.

#+BEGIN_SRC emacs-lisp
;;; ~/.config/doom/config.el -*- lexical-binding: t; -*-
#+END_SRC

** Personal information
This contains various bits about myself that Emacs likes to use in various modules.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "James Ravn"
      user-mail-address "james@r-vn.org"
      calendar-latitude 51.508166
      calendar-longitude -0.075971
      calendar-location-name "London, UK")
#+END_SRC

** Visual Settings

This tweaks the visuals to my liking.

*** Theme

Use the default doom-one theme, and the very nice [[https://www.fsd.it/shop/fonts/pragmatapro/][PragmataPro]] font.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-one              ;
      doom-font (font-spec :family "PragmataPro Liga" :size 16 :adstyle "Regular")
      +pretty-code-pragmata-pro-font-name "PragmataPro Liga")
#+END_SRC

Disable variable-pitch font for =treemacs= to keep the font face the same. I find it too jarring of a contrast.

#+BEGIN_SRC emacs-lisp
(setq doom-themes-treemacs-enable-variable-pitch nil)
#+END_SRC

*** Maximize

Maximize the frame when doom starts. I prefer it always opening up this way. Note this has no real effect if using a
tiling WM.

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Editor behavior

This tweaks the general editor behavior to my liking.

*** Deletion

Delete files to the local Trash folder, e.g. =~/.local/share/Trash= on Linux.

#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t)
#+END_SRC

*** Auto-save

I want Emacs to save files I'm working on in case my system crashes. These get stored in
=~/.emacs.d/local/cache/autosave= in some weird format. Still, better safe than sorry. Emacs will prompt to recover them
on opening the file.

#+BEGIN_SRC emacs-lisp
(setq auto-save-default t)
#+END_SRC

And like other modern editors, I want Emacs to save the buffer when the focus changes. To avoid weird issues, such as
when inserting links via popups, I only save when swapping between file buffers.

#+BEGIN_SRC emacs-lisp
(add-hook! '(doom-switch-buffer-hook
             doom-switch-window-hook
             focus-out-hook)
  (if (buffer-file-name) (save-some-buffers t))) ; avoid saving when switching to a non-file buffer
#+END_SRC

*** Line wrapping

Fill column primarily affects how Emacs breaks lines in ~auto-fill-mode~. The default is 80. I set it to 120 which is a
bit nicer for modern screens.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 120)
#+END_SRC

Also disable ~auto-fill-mode~ by default. I prefer to enable it when I want, as it doesn't play nicely with many of the
text files I work on. Instead I use ~+word-wrap-mode~ which is equivalent to using =SPC t w= by default.

#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'text-mode-hook #'+word-wrap-mode)
#+END_SRC

*** Window splitting

Make the window splitting a bit nicer. First, focus the newly created window:

#+BEGIN_SRC emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+END_SRC

Then prompt to switch buffer:

#+BEGIN_SRC emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (persp-switch-to-buffer))
#+END_SRC

Emacs automatically splits a window when opening up a buffer via lookup, or similar, if it thinks there is enough room.
I find the default of 160 too aggressive, so increase it to make Emacs more conservative.

#+BEGIN_SRC emacs-lisp
(setq split-width-threshold 240)
#+END_SRC

*** Clipboard

Integrate Emacs with the system clipboard. All copy/paste goes into and takes from the system clipboard. This allows
easy copying in other applications and pasting into Emacs via =p= or other normal paste mechanisms.

#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t)
#+END_SRC

* Packages
This section defines the custom packages for =packages.el=.

** Package loading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments link
:END:

Use the ~package!~ macro for each package. Afterwards run ~doom refresh~ on the command line. Everything in this section
goes into =packges.el=.

=packages.el= should not be byte-compiled.

#+BEGIN_SRC emacs-lisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-
#+END_SRC

*** atomic-chrome

=atomic-chrome= provides integration with [[https://atom.io/packages/atomic-chrome][atomic chrome]] extension. This lets me use Emacs to edit browser text
boxes! It's very handy for large Github comments.

#+BEGIN_SRC emacs-lisp :tangle "packages.el"
(package! atomic-chrome)
#+END_SRC

*** org-roam

=org-roam= is included by default in doom. I like to use the latest version - so I pin it to a more recent one.

#+BEGIN_SRC emacs-lisp :tangle "packages.el"
(package! org-roam :pin "4af4d2e4d5f18422fe0f90d5d83fe4c10ef1a20f")
#+END_SRC

** Package configuration
For configuring packages that are loaded in =packages.el=.

*** atomic-chrome
Enable [[*atomic-chrome][atomic-chrome]] integration.

#+BEGIN_SRC emacs-lisp
(use-package! atomic-chrome
  :after-call focus-out-hook
  :config
  (setq atomic-chrome-default-major-mode 'markdown-mode
        atomic-chrome-buffer-open-style 'frame)
  (atomic-chrome-start-server))
#+END_SRC

* Modules
This section configures the modules provided by doom and enabled in my local =init.el=.

** Core configuration
*** Projects
Set the search directories for projectile to auto-discovery projects.

#+BEGIN_SRC emacs-lisp
(setq projectile-project-search-path '("~/devel/" "~/sky/" "~/Dropbox" "~/gatech"))
#+END_SRC

#+RESULTS:
| ~/devel/ | ~/sky/ | ~/Dropbox | ~/gatech |

Clear the projectile cache when swapping branches in =magit= which will likely change the files in the project.

#+BEGIN_SRC emacs-lisp
(defun +private/projectile-invalidate-cache (&rest _args)
  (projectile-invalidate-cache nil))
(advice-add 'magit-checkout
            :after #'+private/projectile-invalidate-cache)
(advice-add 'magit-branch-and-checkout
            :after #'+private/projectile-invalidate-cache)
#+END_SRC

** UI configuration
*** Workspaces
By default doom loads a project into the main workspace if it's empty. I don't like this behavior - I prefer to reserve
the main workspace for ad hoc editing of files. So always open up a new workspace when opening up a project.

#+BEGIN_SRC emacs-lisp
(setq +workspaces-on-switch-project-behavior t)
#+END_SRC

*** Zen
Get rid of the change in font. I use zen mode for code, so I want to keep my normal font. Also enable the mode-line, and
set a width more appropriate for a modern screen size.

#+BEGIN_SRC emacs-lisp
(after! writeroom-mode
  (setq +zen-text-scale 0
        +zen-mixed-pitch-modes nil
        writeroom-mode-line t
        writeroom-width 160))
#+END_SRC

*** Treemacs
Enable follow-mode so the treemacs cursor follows the buffer file. Also increase the default width to show more stuff.

#+BEGIN_SRC emacs-lisp
(after! treemacs
  (treemacs-follow-mode 1)
  (setq treemacs-width 40))
#+END_SRC

** Language configuration
*** Golang
Tweak the hover documentation of =gopls= so it shows more information when using ~+lookup/documentation~. For some
reason though this seems slightly broken - as the documentation popup contains raw HTML escapes.

#+BEGIN_SRC emacs-lisp
(setq lsp-gopls-hover-kind "FullDocumentation")
#+END_SRC

*** Org Mode
This section tweaks =org-mode= to my own specific needs and workflow. There is a lot of custom stuff here, so
modify/adapt/use as you find useful.

The most important thing is to tell org-mode where your org files are.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/Notes/")
#+END_SRC

**** General settings
***** Visual configuration

Make org-mode look nicer than the defaults! Shamelessly stolen from
[[https://github.com/hlissner/doom-emacs-private/blob/master/config.el]].

#+BEGIN_SRC emacs-lisp
(setq
 org-ellipsis " ▼ "
 org-superstar-headline-bullets-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷" "☷" "☷" "☷"))
#+END_SRC

***** Archiving

I prefer to archive tasks into a sub-folder. Also, I want to keep any inherited tags so information is not lost, as I
frequently archive sub-trees.

#+BEGIN_SRC emacs-lisp
(setq org-archive-location (concat org-directory ".archive/%s::"))
(after! org (setq org-archive-subtree-add-inherited-tags t))
#+END_SRC
***** Download
=org-download= makes it easy to download images directly into org files.

I configure it to use my preferred capture method depending on OS.

#+BEGIN_SRC emacs-lisp
(after! org-download
  (setq org-download-screenshot-method
        (cond (IS-MAC "screencapture -i %s")
              (IS-LINUX "~/.config/sway/capture.sh %s"))))
#+END_SRC

**** Task management
I follow my own take on GTD for task management. The task management is independent of notes, and the task files are kept
in the main ~org-directory~. The files are:
- inbox.org    :: Captures go here for later filing.
- todo.org     :: The primary todo list, with all actively worked on projects and TODO items.
- ticklers.org :: Reminders and tasks to be worked on later.
- someday.org  :: I'll do these things one day, maybe.

My high level process is:
1. Once or twice a day, open up the all agenda (=SPC o A A=).
2. Refile everything in the inbox section appropriately.
3. Anything in the schedule that needs doing is moved from =ticklers.org= to =todo.org=.
4. Whenever I need to see what task to pick up, I open up the context specific agenda. E.g. =SPC o A h= for =@home=.

***** Task settings

Define the =TODO= states and also mark complete items with the current time.

#+BEGIN_SRC emacs-lisp
(after! org
  (setq
   org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))
   org-log-done 'time))
#+END_SRC

***** Contexts

I use tags to primarily set contexts, following the GTD process. I have =@work=, =@home=, and =@omscs=. I configure
tag selection, =C-c C-c=, to quickly pick one of these contexts.

#+BEGIN_SRC emacs-lisp
(after! org
  (setq
   org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("@omscs" . ?o))
   org-fast-tag-selection-single-key t))
#+END_SRC

***** Refile targets

Define targets for potential refile. This is part of my GTD system and allows quickly moving tasks between the core task
files.

#+BEGIN_SRC emacs-lisp
(after! org
  (setq
   org-refile-targets '(("~/Dropbox/Notes/todo.org" :maxlevel . 2)
                        ("~/Dropbox/Notes/someday.org" :maxlevel . 1)
                        ("~/Dropbox/Notes/tickler.org" :maxlevel . 2)
                        ("~/Dropbox/Notes/notes.org" :maxlevel . 2))))
#+END_SRC

***** Habits

Enable org-habit to allow special scheduled items for helping me create habits. To use, create a recurring =SCHEDULED= item with
the =STYLE= property (=C-x C-p=) set to =habit=.  See [[https://orgmode.org/manual/Tracking-your-habits.html][Tracking your habits]] for more details.

#+BEGIN_SRC emacs-lisp
(after! org
  (add-to-list 'org-modulles 'org-habit t))
#+END_SRC

***** Custom Agendas
The agendas are my central view on tasks. There are separate subsections for each agenda view, defined as a function.

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-custom-commands
        (list (jsravn--all-agenda)
              (jsravn--agenda "home")
              (jsravn--agenda "work")
              (jsravn--agenda "omscs"))))
#+END_SRC

Also, give me two weeks warning of impending deadlines.

#+BEGIN_SRC emacs-lisp
(after! org (setq org-deadline-warning-days 14))
#+END_SRC

****** All Agenda Function

This is my all agenda function. It shows everything going on in my TODO system.

#+BEGIN_SRC emacs-lisp
(defun jsravn--all-agenda ()
  "Custom all agenda."
  `("A" "All agenda"
    ((todo "" ((org-agenda-files '("~/Dropbox/Notes/inbox.org"))
               (org-agenda-overriding-header "Inbox")))
     (tags "-{.*}" ((org-agenda-files '("~/Dropbox/Notes/todo.org"
                                        "~/Dropbox/Notes/tickler.org"
                                        "~/Dropbox/Notes/someday.org"))
                    (org-agenda-overriding-header "Untagged")))
     (agenda "" ((org-agenda-span 7)
                 (org-agenda-start-day "-1d")
                 (org-agenda-files '("~/Dropbox/Notes/tickler.org"
                                     "~/Dropbox/Notes/todo.org"))
                 (org-agenda-skip-function #'jsravn--skip-scheduled-if-in-todo)))
     ,(jsravn--tags-todo "@home" "Home")
     ,(jsravn--tags-todo "@work" "Work")
     ,(jsravn--tags-todo "@omscs" "OMSCS"))))
#+END_SRC

****** Context Agenda Function

This is my per-context agenda function. It is a slimmed down version of the [[*All Agenda Function][All Agenda Function]] that scopes to a
context, like =@home=.

#+BEGIN_SRC emacs-lisp
(defun jsravn--agenda (scope)
  "Custom scoped agenda."
  (let ((key (substring scope 0 1))
        (title (concat (upcase-initials scope) "agenda"))
        (tag (concat "@" scope)))
    `(,key ,title
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-start-day "-1d")
                        (org-agenda-files '("~/Dropbox/Notes/tickler.org"
                                            "~/Dropbox/Notes/todo.org"))
                        (org-agenda-skip-function #'jsravn--skip-scheduled-if-in-todo)))
            ,(jsravn--tags-todo (concat tag "/!TODO") "Todo")
            ,(jsravn--tags-todo (concat tag "/!WAITING") "Waiting"))
           ((org-agenda-tag-filter-preset '(,(concat "+" tag)))))))
#+END_SRC

****** Agenda Support Functions

I have a few support functions for the agendas.

This is a custom ~tags-todo~ view which only shows the first TODO in a subheading, aka project.

#+BEGIN_SRC emacs-lisp
(defun jsravn--tags-todo (tags header)
  "Customized tags-todo view which only shows the first TODO in a subheading."
  `(tags-todo ,tags ((org-agenda-files '("~/Dropbox/Notes/todo.org"))
                     (org-agenda-overriding-header ,header)
                     (org-agenda-skip-function #'jsravn--skip-all-siblings-but-first))))

(defun jsravn--skip-all-siblings-but-first ()
  "Skip all but the first non-done entry that is inside a subheading."
  (when (> (car (org-heading-components)) 2)
    (let (should-skip-entry)
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (string= "TODO" (org-get-todo-state))
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading) (goto-char (point-max)))))))
#+END_SRC

This a custom filter that skips any =SCHEDULED= items which have already been filed in my =todo.org=.

#+BEGIN_SRC emacs-lisp
(defun jsravn--skip-scheduled-if-in-todo ()
  "Skip scheduled items that have been moved to todo.org."
  (when (and (string= "todo.org" (file-name-nondirectory (buffer-file-name)))
             (org-entry-get nil "SCHEDULED"))
    (or (outline-next-heading) (goto-char (point-max)))))
#+END_SRC
***** Agenda Searches
Agenda search is usually accessed via =SPC o A s= and allows quick searching of all task files.

I like to include archived tasks in the search.

#+BEGIN_SRC emacs-lisp
(after! org (setq org-agenda-text-search-extra-files '(agenda-archives))
#+END_SRC

Also use the more intuitive boolean search method, where each word is searched independently rather than being treated
as a single phrase. A single phrase can be forced by enclosing in quotations.

#+BEGIN_SRC emacs-lisp
(after! org (setq org-agenda-search-view-always-boolean t)
#+END_SRC

**** Notes
I use org-roam, deft, and org-journal to manage my notes.

***** org-roam

I use [[https://org-roam.readthedocs.io/en/master/][org-roam]] to organize my notes. =org-roam= is scoped to a single folder which contains all the org files that roam
should create metadata for. I prefer to keep my notes separate from my task system, so I put this into a dedicated
sub-folder inside the org directory.

#+BEGIN_SRC emacs-lisp
(setq org-roam-directory (concat org-directory "roam/"))
#+END_SRC

I'm also experimenting with deft as the interface for org-roam. I'm still undecided whether it is useful - I find myself
just using the normal =projectile-find-file= interface.

#+BEGIN_SRC emacs-lisp
(setq deft-directory org-roam-directory)
#+END_SRC

I don't want the org-roam buffer closing on =C-w C-o=.

#+BEGIN_SRC emacs-lisp
(setq org-roam-buffer-no-delete-other-windows t)
#+END_SRC

And I want the org-roam buffer to open automatically when I visit a roam file.

#+BEGIN_SRC emacs-lisp
(defun jsravn--open-org-roam ()
  "Called by `find-file-hook' when `org-roam-mode' is on."
  (when (org-roam--org-roam-file-p)
    (unless (eq 'visible (org-roam--current-visibility)) (org-roam))))

(after! org-roam
  (add-hook 'doom-switch-buffer-hook #'jsravn--open-org-roam))
#+END_SRC

***** org-journal

Set up org-journal to integrate with org-roam.

#+BEGIN_SRC emacs-lisp
(after! org-journal
  (setq org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-dir org-roam-directory
        org-journal-date-format "%A, %d %B %Y"))
#+END_SRC
** Tools configuration
*** Language Server Protocol (LSP)
Disable the auto root guessing that doom enables by default, but doesn't work very well in my experience. With this
disabled LSP will prompt for the project root when opening a new LSP recognized file. This adds a little
inconvenience, but saves a lot of trouble.

#+BEGIN_SRC emacs-lisp
(setq lsp-auto-guess-root nil)
#+END_SRC

Disable symbol highlighting which is just obnoxious, especially in =gopls= where it seems to highlight about a dozen
things on the screen for every symbol.

#+BEGIN_SRC emacs-lisp
(setq lsp-enable-symbol-highlighting nil)
#+END_SRC

Disable auto-linking which seems [[https://github.com/hlissner/doom-emacs/issues/2911][fundamentally broken]] as it breaks other buffers.

#+BEGIN_SRC emacs-lisp
(setq lsp-enable-links nil)
#+END_SRC

Bind the default ~lsp-command-map~.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix "c"
        (:after lsp-mode
          :desc "LSP" "l" lsp-command-map)))
#+END_SRC

*** Magit
Prefer offering remote branches when prompting for a branch selection.

#+BEGIN_SRC emacs-lisp
(setq magit-prefer-remote-upstream t)
#+END_SRC

Limit the number of topics that forge displays. I find the default a bit too large.

#+BEGIN_SRC emacs-lisp
(setq forge-topic-list-limit '(15 . 5))
#+END_SRC
